The pipeline comes in three stages:

The Source stage pulls the latest code from GitHub.
The Build stage builds the latest code with CodeBuild according to our buildspec.yml file.
The Deploy stage deploys the build artifacts from CodeBuild to the EC2 instances referenced in the deployment group, 
and starts the application according to our appspec.yml file.

Pipeline:
  Type: AWS::CodePipeline::Pipeline
  Properties:
    Name: !Ref AWS::StackName
    ArtifactStore:
      Location: !Ref CodePipelineBucket
      Type: S3
    RoleArn: !GetAtt DeploymentRole.Arn
    Stages:
      - Name: Source
        Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: 1
              Provider: GitHub
            OutputArtifacts:
              - Name: Source
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref GitHubRepo
              Branch: !Ref GitHubBranch
              OAuthToken: !Ref GitHubPersonalAccessToken
              PollForSourceChanges: false
            RunOrder: 1
      - Name: Build
        Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            InputArtifacts:
              - Name: Source
            OutputArtifacts:
              - Name: Build
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
      - Name: Staging
        Actions:
          - Name: Staging
            InputArtifacts:
              - Name: Build
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CodeDeploy
            Configuration:
              ApplicationName: !Ref DeploymentApplication
              DeploymentGroupName: !Ref StagingDeploymentGroup
            RunOrder: 1
            
Create webhook that will trigger the pipeline as soon as change is pushed to GitHub (main.yml)
PipelineWebhook:
  Type: AWS::CodePipeline::Webhook
  Properties:
    Authentication: GITHUB_HMAC
    AuthenticationConfiguration:
      SecretToken: !Ref GitHubPersonalAccessToken
    Filters:
      - JsonPath: $.ref
        MatchEquals: 'refs/heads/{Branch}'
    TargetPipeline: !Ref Pipeline
    TargetAction: Source
    Name: !Sub 'webhook-${AWS::StackName}'
    TargetPipelineVersion: !GetAtt Pipeline.Version
    RegisterWithThirdParty: true
    
    
Chages to EC2 instance to get code deploy agent installed (main.yml)     
Instance:
  Type: AWS::EC2::Instance
  CreationPolicy:
    ResourceSignal:
      Timeout: PT5M
      Count: 1
  Metadata:
    AWS::CloudFormation::Init:
      config:
        packages:
          yum:
            ruby: [] 
        files:
          /home/ec2-user/install: 
            source: !Sub "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install"
            mode: "000755" # executable
        commands:
          00-install-cd-agent: 
            command: "./install auto"
            cwd: "/home/ec2-user/"
  Properties:
    ImageId: !Ref EC2AMI
    InstanceType: !Ref EC2InstanceType
    IamInstanceProfile: !Ref InstanceProfile
    Monitoring: true
    SecurityGroupIds:
      - !GetAtt SecurityGroup.GroupId
    UserData:
      # ... 
    Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        
Update UserData section

UserData:
  Fn::Base64: !Sub |
    #!/bin/bash -xe

    # send script output to /tmp so we can debug boot failures
    exec > /tmp/userdata.log 2>&1

    # Update all packages
    yum -y update

    # Get latest cfn scripts; https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfninit
    yum install -y aws-cfn-bootstrap

    cat > /tmp/install_script.sh << EOF
      # START
      echo "Setting up NodeJS Environment"
      curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

      # Dot source the files to ensure that variables are available within the current shell
      . /home/ec2-user/.nvm/nvm.sh
      . /home/ec2-user/.bashrc

      # Install NVM, NPM, Node.JS
      nvm alias default v12.7.0
      nvm install v12.7.0
      nvm use v12.7.0

      # Create log directory
      mkdir -p /home/ec2-user/app/logs
    EOF

    chown ec2-user:ec2-user /tmp/install_script.sh && chmod a+x /tmp/install_script.sh
    sleep 1; su - ec2-user -c "/tmp/install_script.sh"

    # Have CloudFormation install any files and packages from the metadata
    /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance
    # Signal to CloudFormation that the instance is ready
    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance
    
    
    
    
        
            
            
